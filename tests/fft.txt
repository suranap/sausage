
(lambda (a)
  (let ((a0 (vector-ref a 0))
        (a1 (vector-ref a 1))
        (a2 (vector-ref a 2))
        (a3 (vector-ref a 3)))
    (let ((y0 (+ a0 (* (unity-root 2 0) a2)))
	  (y1 (- a0 (* (unity-root 2 0) a2)))
	  (y2 (+ a1 (* (unity-root 2 0) a3)))
	  (y3 (- a1 (* (unity-root 2 0) a3))))
      (let ((r0 (+ y0 (* (unity-root 4 0) y2)))
	    (r1 (+ y1 (* (unity-root 4 1) y3)))
	    (r2 (- y0 (* (unity-root 4 0) y2)))
	    (r3 (- y1 (* (unity-root 4 1) y3))))
        (vector-set! a 0 r0)
        (vector-set! a 1 r1)
        (vector-set! a 2 r2)
        (vector-set! a 3 r3)))))

(lambda (a)
  (let ((a0 (vector-ref a 0))
        (a1 (vector-ref a 1))
        (a2 (vector-ref a 2))
        (a3 (vector-ref a 3)))
    (let ((y0 (+ a0 a2))
	  (y1 (- a0 a2))
	  (y2 (+ a1 a3))
	  (y3 (- a1 a3)))
      (let ((r0 (+ y0 y2))
	    (r1 (+ y1 (* 0+1i y3)))
	    (r2 (- y0 y2))
	    (r3 (- y1 (* 0+1i y3))))
        (vector-set! a 0 r0)
        (vector-set! a 1 r1)
        (vector-set! a 2 r2)
        (vector-set! a 3 r3)))))